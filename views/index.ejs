<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Learn It, Love It - Votaciones</title>
  <style>
    /* === Estilos base === */
    body {
      font-family: "Segoe UI", Arial, sans-serif;
      background: #f4f6f8;
      margin: 0;
      padding: 30px;
    }

    h1 {
      text-align: center;
      color: #333;
      margin-bottom: 30px;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    /* === Botones === */
    button {
      background: #007bff;
      border: none;
      color: white;
      padding: 6px 10px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background 0.2s;
    }

    button:hover { background: #0056b3; }

    .crear {
      display: block;
      margin: 0 auto 25px;
      background: #28a745;
      font-weight: bold;
      padding: 10px 15px;
    }

    .crear:hover { background: #218838; }

    /* === Tarjetas de temas === */
    .tema {
      border: 1px solid #ddd;
      background: #fafafa;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 15px;
      transition: background 0.2s;
    }

    .tema:hover {
      background: #f0f8ff;
    }

    .tema strong {
      font-size: 1.1rem;
      color: #333;
    }

    .acciones {
      margin-top: 10px;
    }

    .acciones button {
      margin-right: 5px;
    }

    .verSubtemas {
      background: #6f42c1;
    }

    .verSubtemas:hover {
      background: #59359a;
    }
  </style>
</head>
<body>

  <h1>üå± Learn It, Love It</h1>

  <div class="container">
    <button class="crear" id="crearTemaBtn">+ Crear Nuevo Tema</button>

    <div id="temasContainer">
      <% temas.forEach(tema => { %>
        <div class="tema" data-titulo="<%= tema.titulo %>">
          <strong><%= tema.titulo %></strong>
          <p>Votos: <span class="votos"><%= tema.votos %></span></p>
          
          <div class="acciones">
            <button class="votarTema">üëç Votar</button>
            <button class="editarTema">‚úèÔ∏è Editar</button>
            <button class="eliminarTema">üóëÔ∏è Eliminar</button>
            <a href="/temas/<%= encodeURIComponent(tema.titulo) %>/subtemas">
              <button class="verSubtemas">üìö Ver Subtemas</button>
            </a>
          </div>
        </div>
      <% }) %>
    </div>
  </div>

  <script>
    const temasContainer = document.getElementById('temasContainer');

    function ordenarTemasPorVotos() {
      const temasArray = Array.from(temasContainer.children);
      temasArray.sort((a, b) => {
        const votosA = parseInt(a.querySelector('.votos').textContent);
        const votosB = parseInt(b.querySelector('.votos').textContent);
        return votosB - votosA;
      });
      temasArray.forEach(t => temasContainer.appendChild(t));
    }

    // Crear tema nuevo
    document.getElementById('crearTemaBtn').addEventListener('click', async () => {
      const titulo = prompt('Ingrese el t√≠tulo del nuevo tema:');
      if (!titulo) return;
      try {
        const res = await fetch('/temas', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tituloTema: titulo })
        });
        if (!res.ok) throw new Error('Error al crear tema');
        location.reload();
      } catch(err) { console.error(err); }
    });

    // Delegaci√≥n de eventos para temas
    temasContainer.addEventListener('click', async (e) => {
      const temaDiv = e.target.closest('.tema');
      if (!temaDiv) return;
      const titulo = temaDiv.dataset.titulo;
      const tituloEncoded = encodeURIComponent(titulo);

      // Votar tema
      if (e.target.classList.contains('votarTema')) {
        try {
          const votosActuales = parseInt(temaDiv.querySelector('.votos').textContent);
          const res = await fetch(`/temas/${tituloEncoded}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ votos: votosActuales + 1 })
          });
          const data = await res.json();
          temaDiv.querySelector('.votos').textContent = data.tema.votos;
          ordenarTemasPorVotos();
        } catch(err) { console.error(err); }
      }

      // Editar tema
      if (e.target.classList.contains('editarTema')) {
        const nuevoTitulo = prompt('Nuevo t√≠tulo del tema:', titulo);
        if (!nuevoTitulo) return;
        try {
          const res = await fetch(`/temas/${tituloEncoded}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ tituloTema: nuevoTitulo })
          });
          const data = await res.json();
          temaDiv.querySelector('strong').textContent = data.tema.titulo;
          temaDiv.dataset.titulo = data.tema.titulo;
        } catch(err) { console.error(err); }
      }

      // Eliminar tema
      if (e.target.classList.contains('eliminarTema')) {
        if (!confirm(`¬øEliminar el tema "${titulo}"?`)) return;
        try {
          await fetch(`/temas/${tituloEncoded}`, { method: 'DELETE' });
          temaDiv.remove();
        } catch(err) { console.error(err); }
      }
    });

    // Orden inicial
    ordenarTemasPorVotos();
  </script>

</body>
</html>
